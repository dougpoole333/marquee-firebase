{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\nimport { EmptyState, Spinner, Layout, Page, Card, Select, Button } from '@shopify/polaris';\nimport Installs from './installs.js';\nimport Cookies from 'js-cookie';\nimport \"./styles/selector.css\";\n\nclass Selector extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"getThemes\", async () => {\n      let urlParams = new URLSearchParams(window.location.search);\n      let shopOrigin = urlParams.get('shop');\n      let shopName = urlParams.get('shop').split(\".\")[0];\n      fetch(\"/themes/\" + shopName, {\n        method: \"GET\"\n      }).then(response => response.json()).then(json => this.setState({\n        themes: json.data.themes,\n        shopName: shopName,\n        loading: false\n      }));\n    });\n\n    _defineProperty(this, \"getInstalls\", async () => {\n      let urlParams = new URLSearchParams(window.location.search);\n      let shopOrigin = urlParams.get('shop');\n      let shopName = urlParams.get('shop').split(\".\")[0];\n      fetch(\"/\" + shopName + \"/installs\", {\n        method: \"GET\"\n      }).then(response => response.json()).then(json => {\n        this.setState({\n          installs: json.data\n        });\n      });\n    });\n\n    _defineProperty(this, \"handleChange\", newValue => {\n      this.setState({\n        selected: newValue\n      });\n    });\n\n    _defineProperty(this, \"triggerReset\", () => {\n      this.setState({\n        selected: ''\n      });\n    });\n\n    _defineProperty(this, \"renderStatus\", () => {\n      if (this.state.status == 'loading') {\n        return React.createElement(\"div\", null, \" loading... \");\n      } else if (this.state.status == 'success') {\n        return React.createElement(\"div\", null, \" Marquee successfully added to theme!\");\n      }\n    });\n\n    _defineProperty(this, \"renderSelector\", () => {\n      return React.createElement(\"div\", {\n        className: \"selector-header\"\n      }, React.createElement(Select, {\n        options: this.state.themes ? this.state.themes.map(el => {\n          return {\n            label: `${el.name}`,\n            value: `${el.id}`\n          };\n        }) : null,\n        onChange: this.handleChange,\n        value: this.state.selected,\n        placeholder: \"select a theme\"\n      }), this.renderStatus(), React.createElement(Button, {\n        primary: true,\n        onClick: this.assetUpdateRequest\n      }, \"Add\"));\n    });\n\n    _defineProperty(this, \"renderInstalls\", () => {\n      return React.createElement(Card, null, React.createElement(Installs, {\n        shopName: this.state.shopName,\n        installs: this.state.installs,\n        status: this.state.status\n      }));\n    });\n\n    _defineProperty(this, \"assetUpdateRequest\", async () => {\n      this.setState({\n        status: 'loading'\n      });\n      var fetchUrl = `${this.state.shopName}/${this.state.selected}`;\n      var method = \"PUT\";\n      fetch(fetchUrl, {\n        method: method\n      }).then(response => response.json()).then(json => {\n        if (json.status === 'success') {\n          this.setState({\n            loading: false\n          });\n        }\n      }).then(() => {\n        this.getInstalls();\n      }).then(() => {\n        this.setState({\n          status: 'success'\n        });\n      });\n    });\n\n    this.state = {\n      status: 'default',\n      shopName: '',\n      selected: '',\n      themes: [],\n      installs: []\n    };\n  }\n\n  componentDidMount() {\n    this.getThemes();\n    this.getInstalls();\n  }\n\n  render() {\n    return React.createElement(Card, null, this.renderSelector(), this.renderInstalls());\n  }\n\n}\n\nexport default Selector;","map":{"version":3,"sources":["/Users/userone/Documents/App-dev/marquee-firebase/pages/selector.js"],"names":["EmptyState","Spinner","Layout","Page","Card","Select","Button","Installs","Cookies","Selector","React","Component","constructor","props","urlParams","URLSearchParams","window","location","search","shopOrigin","get","shopName","split","fetch","method","then","response","json","setState","themes","data","loading","installs","newValue","selected","state","status","map","el","label","name","value","id","handleChange","renderStatus","assetUpdateRequest","fetchUrl","getInstalls","componentDidMount","getThemes","render","renderSelector","renderInstalls"],"mappings":"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","sourcesContent":["import { EmptyState, Spinner, Layout, Page, Card, Select, Button } from '@shopify/polaris';\nimport Installs from './installs.js'\nimport Cookies from 'js-cookie';\n\nimport \"./styles/selector.css\"\n\nclass Selector extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      status: 'default',\n      shopName: '',\n      selected: '',\n      themes: [],\n      installs: []\n    };\n  }\n\n  componentDidMount(){\n    this.getThemes();\n    this.getInstalls()\n  }\n\n  render() {\n    return (\n        <Card>\n          {this.renderSelector()}\n          {this.renderInstalls()}\n        </Card>\n    );\n  };\n\n  getThemes = async () => {\n    let urlParams = new URLSearchParams(window.location.search);\n    let shopOrigin = urlParams.get('shop');\n    let shopName = urlParams.get('shop').split(\".\")[0]\n    fetch(\"/themes/\" + shopName, { method: \"GET\"})\n    .then(response => response.json())\n    .then(json => this.setState({themes: json.data.themes, shopName: shopName, loading: false}))\n  };\n\n  getInstalls = async () => {\n      let urlParams = new URLSearchParams(window.location.search);\n      let shopOrigin = urlParams.get('shop');\n      let shopName = urlParams.get('shop').split(\".\")[0]\n      fetch(\"/\"+shopName+\"/installs\", { method: \"GET\"})\n      .then(response => response.json())\n      .then(json =>{\n          this.setState({installs: json.data})\n      })\n  }\n\n  handleChange = (newValue) => {\n    this.setState({selected: newValue});\n  };\n\n  triggerReset = () => {\n    this.setState({\n      selected: ''\n    })\n  }\n\n  renderStatus = () => {\n    if (this.state.status == 'loading'){\n      return(\n        <div> loading... </div>\n      )}\n    else if (this.state.status == 'success'){\n      return(\n        <div> Marquee successfully added to theme!</div>\n      )\n    }\n  }\n\n  renderSelector = () => {\n      return(\n        <div className=\"selector-header\">\n          <Select\n            options = {this.state.themes ? this.state.themes.map(el => {return{label: `${el.name}`, value:`${el.id}`}}) : null}\n            onChange={this.handleChange}\n            value={this.state.selected}\n            placeholder = \"select a theme\"\n            />\n          {this.renderStatus()}\n          <Button primary onClick={this.assetUpdateRequest}>Add</Button>\n        </div>\n      )\n  }\n\n  renderInstalls = () => {\n      return(\n        <Card><Installs shopName={this.state.shopName} installs={this.state.installs} status={this.state.status}/></Card>\n      )\n  }\n\n  assetUpdateRequest = async () => {\n    this.setState({status: 'loading'})\n    var fetchUrl = `${this.state.shopName}/${this.state.selected}`;\n    var method = \"PUT\";\n    fetch(fetchUrl, { method: method })\n    .then(response => response.json())\n    .then(json => {\n      if (json.status === 'success'){\n        this.setState({loading: false})\n      }\n    })\n    .then( () => {\n      this.getInstalls()\n    })\n    .then( () => {\n      this.setState({status: 'success'})\n    })\n  }\n}\n\nexport default Selector;\n"]},"metadata":{},"sourceType":"module"}