{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\nimport { EmptyState, Spinner, Layout, Page, Select, Button } from '@shopify/polaris';\nimport Cookies from 'js-cookie';\n\nclass Selector extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"setOrigin\", () => {\n      let urlParams = new URLSearchParams(window.location.search);\n      let shopOrigin = urlParams.get('shop');\n      this.setState({\n        shopOrigin: shopOrigin\n      });\n      console.log(shopOrigin);\n    });\n\n    _defineProperty(this, \"getThemes\", async () => {\n      let urlParams = new URLSearchParams(window.location.search);\n      let shopOrigin = urlParams.get('shop');\n      let shopName = urlParams.get('shop').split(\".\")[0];\n      fetch(\"/themes/\" + shopName, {\n        method: \"GET\"\n      }).then(response => response.json()).then(json => this.setState({\n        themes: json.data.themes,\n        shopName: shopName,\n        loading: false\n      }));\n    });\n\n    _defineProperty(this, \"handleChange\", newValue => {\n      this.setState({\n        selected: newValue\n      });\n    });\n\n    _defineProperty(this, \"renderRedirect\", () => {\n      if (this.state.redirect && !this.state.loading) {\n        return React.createElement(Layout.Section, null, React.createElement(\"a\", {\n          target: \"_blank\",\n          style: {\n            textDecoration: 'none'\n          },\n          href: 'http://' + this.state.shopName + `.myshopify.com/admin/themes/${this.state.selected}/editor`\n        }, React.createElement(Button, {\n          primary: true\n        }, \"OPEN CUSTOMIZER\")), React.createElement(Button, {\n          primary: true,\n          onClick: this.triggerReset\n        }, \"ADD MARQUEE TO ANOTHER THEME\"));\n      }\n    });\n\n    _defineProperty(this, \"renderSpinner\", () => {\n      if (this.state.loading) {\n        return React.createElement(EmptyState, null, React.createElement(Spinner, null));\n      }\n    });\n\n    _defineProperty(this, \"triggerReset\", () => {\n      this.setState({\n        selecting: true,\n        selected: '',\n        redirect: false\n      });\n    });\n\n    _defineProperty(this, \"renderSelector\", () => {\n      if (this.state.selecting && !this.state.loading) {\n        return React.createElement(EmptyState, {\n          sty: true\n        }, React.createElement(Select, {\n          options: this.state.themes ? this.state.themes.map(el => {\n            return {\n              label: `${el.name}`,\n              value: `${el.id}`\n            };\n          }) : null,\n          onChange: this.handleChange,\n          value: this.state.selected,\n          placeholder: \"select a theme\"\n        }), React.createElement(Button, {\n          primary: true,\n          onClick: this.assetUpdateRequest\n        }, \"Add\"));\n      }\n    });\n\n    _defineProperty(this, \"assetUpdateRequest\", async () => {\n      this.state.selected ? this.setState({\n        loading: true\n      }) : null;\n      var fetchUrl = `${this.state.shopName}/${this.state.selected}`;\n      var method = \"PUT\";\n      fetch(fetchUrl, {\n        method: method\n      }).then(response => response.json()).then(json => {\n        if (json.status === 'success') {\n          this.setState({\n            redirect: true,\n            selecting: false,\n            loading: false\n          });\n        }\n      });\n    });\n\n    this.state = {\n      shopName: '',\n      selecting: true,\n      loading: true,\n      selected: '',\n      themes: [],\n      redirect: false\n    };\n  }\n\n  componentDidMount() {\n    this.getThemes();\n  }\n\n  render() {\n    return React.createElement(Layout.Section, null, this.renderSelector(), this.renderRedirect(), this.renderSpinner());\n  }\n\n}\n\nexport default Selector;","map":{"version":3,"sources":["/Users/userone/Documents/App-dev/marquee-firebase/pages/selector.js"],"names":["EmptyState","Spinner","Layout","Page","Select","Button","Cookies","Selector","React","Component","constructor","props","urlParams","URLSearchParams","window","location","search","shopOrigin","get","setState","console","log","shopName","split","fetch","method","then","response","json","themes","data","loading","newValue","selected","state","redirect","textDecoration","triggerReset","selecting","map","el","label","name","value","id","handleChange","assetUpdateRequest","fetchUrl","status","componentDidMount","getThemes","render","renderSelector","renderRedirect","renderSpinner"],"mappings":";;AAAA,SAASA,UAAT,EAAqBC,OAArB,EAA8BC,MAA9B,EAAsCC,IAAtC,EAA4CC,MAA5C,EAAoDC,MAApD,QAAkE,kBAAlE;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,QAAN,SAAuBC,KAAK,CAACC,SAA7B,CAAuC;AACrCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;;AADgB,uCA0BN,MAAM;AAChB,UAAIC,SAAS,GAAG,IAAIC,eAAJ,CAAoBC,MAAM,CAACC,QAAP,CAAgBC,MAApC,CAAhB;AACA,UAAIC,UAAU,GAAGL,SAAS,CAACM,GAAV,CAAc,MAAd,CAAjB;AACA,WAAKC,QAAL,CAAc;AAACF,QAAAA,UAAU,EAAEA;AAAb,OAAd;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAYJ,UAAZ;AACD,KA/BiB;;AAAA,uCAiCN,YAAY;AACtB,UAAIL,SAAS,GAAG,IAAIC,eAAJ,CAAoBC,MAAM,CAACC,QAAP,CAAgBC,MAApC,CAAhB;AACA,UAAIC,UAAU,GAAGL,SAAS,CAACM,GAAV,CAAc,MAAd,CAAjB;AACA,UAAII,QAAQ,GAAGV,SAAS,CAACM,GAAV,CAAc,MAAd,EAAsBK,KAAtB,CAA4B,GAA5B,EAAiC,CAAjC,CAAf;AACAC,MAAAA,KAAK,CAAC,aAAaF,QAAd,EAAwB;AAAEG,QAAAA,MAAM,EAAE;AAAV,OAAxB,CAAL,CACCC,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEME,IAAI,IAAI,KAAKT,QAAL,CAAc;AAACU,QAAAA,MAAM,EAAED,IAAI,CAACE,IAAL,CAAUD,MAAnB;AAA2BP,QAAAA,QAAQ,EAAEA,QAArC;AAA+CS,QAAAA,OAAO,EAAE;AAAxD,OAAd,CAFd;AAGD,KAxCiB;;AAAA,0CA0CFC,QAAD,IAAc;AAC3B,WAAKb,QAAL,CAAc;AAACc,QAAAA,QAAQ,EAAED;AAAX,OAAd;AACD,KA5CiB;;AAAA,4CA8CD,MAAM;AACrB,UAAI,KAAKE,KAAL,CAAWC,QAAX,IAAuB,CAAC,KAAKD,KAAL,CAAWH,OAAvC,EAAgD;AAC9C,eACE,oBAAC,MAAD,CAAQ,OAAR,QACE;AACE,UAAA,MAAM,EAAC,QADT;AAEE,UAAA,KAAK,EAAE;AAACK,YAAAA,cAAc,EAAE;AAAjB,WAFT;AAGE,UAAA,IAAI,EAAE,YAAY,KAAKF,KAAL,CAAWZ,QAAvB,GAAmC,+BAA8B,KAAKY,KAAL,CAAWD,QAAS;AAH7F,WAII,oBAAC,MAAD;AAAQ,UAAA,OAAO;AAAf,6BAJJ,CADF,EAQE,oBAAC,MAAD;AAAQ,UAAA,OAAO,MAAf;AAAgB,UAAA,OAAO,EAAE,KAAKI;AAA9B,0CARF,CADF;AAYD;AACF,KA7DiB;;AAAA,2CA+DF,MAAM;AACpB,UAAG,KAAKH,KAAL,CAAWH,OAAd,EAAsB;AACpB,eACE,oBAAC,UAAD,QACE,oBAAC,OAAD,OADF,CADF;AAKD;AACF,KAvEiB;;AAAA,0CAyEH,MAAM;AACnB,WAAKZ,QAAL,CAAc;AACZmB,QAAAA,SAAS,EAAE,IADC;AAEZL,QAAAA,QAAQ,EAAE,EAFE;AAGZE,QAAAA,QAAQ,EAAE;AAHE,OAAd;AAKD,KA/EiB;;AAAA,4CAiFD,MAAM;AACrB,UAAI,KAAKD,KAAL,CAAWI,SAAX,IAAwB,CAAC,KAAKJ,KAAL,CAAWH,OAAxC,EAAgD;AAC9C,eACE,oBAAC,UAAD;AAAY,UAAA,GAAG;AAAf,WACE,oBAAC,MAAD;AACE,UAAA,OAAO,EAAI,KAAKG,KAAL,CAAWL,MAAX,GAAoB,KAAKK,KAAL,CAAWL,MAAX,CAAkBU,GAAlB,CAAsBC,EAAE,IAAI;AAAC,mBAAM;AAACC,cAAAA,KAAK,EAAG,GAAED,EAAE,CAACE,IAAK,EAAnB;AAAsBC,cAAAA,KAAK,EAAE,GAAEH,EAAE,CAACI,EAAG;AAArC,aAAN;AAA8C,WAA3E,CAApB,GAAmG,IADhH;AAEE,UAAA,QAAQ,EAAE,KAAKC,YAFjB;AAGE,UAAA,KAAK,EAAE,KAAKX,KAAL,CAAWD,QAHpB;AAIE,UAAA,WAAW,EAAG;AAJhB,UADF,EAOE,oBAAC,MAAD;AAAQ,UAAA,OAAO,MAAf;AAAgB,UAAA,OAAO,EAAE,KAAKa;AAA9B,iBAPF,CADF;AAWD;AACF,KA/FiB;;AAAA,gDAiGG,YAAY;AAC/B,WAAKZ,KAAL,CAAWD,QAAX,GAAsB,KAAKd,QAAL,CAAc;AAACY,QAAAA,OAAO,EAAE;AAAV,OAAd,CAAtB,GAAuD,IAAvD;AACA,UAAIgB,QAAQ,GAAI,GAAE,KAAKb,KAAL,CAAWZ,QAAS,IAAG,KAAKY,KAAL,CAAWD,QAAS,EAA7D;AACA,UAAIR,MAAM,GAAG,KAAb;AACAD,MAAAA,KAAK,CAACuB,QAAD,EAAW;AAAEtB,QAAAA,MAAM,EAAEA;AAAV,OAAX,CAAL,CACCC,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEME,IAAI,IAAI;AACZ,YAAIA,IAAI,CAACoB,MAAL,KAAgB,SAApB,EAA8B;AAC5B,eAAK7B,QAAL,CAAc;AAACgB,YAAAA,QAAQ,EAAE,IAAX;AAAiBG,YAAAA,SAAS,EAAE,KAA5B;AAAmCP,YAAAA,OAAO,EAAE;AAA5C,WAAd;AACD;AACF,OAND;AAOD,KA5GiB;;AAEhB,SAAKG,KAAL,GAAa;AACXZ,MAAAA,QAAQ,EAAE,EADC;AAEXgB,MAAAA,SAAS,EAAE,IAFA;AAGXP,MAAAA,OAAO,EAAE,IAHE;AAIXE,MAAAA,QAAQ,EAAE,EAJC;AAKXJ,MAAAA,MAAM,EAAE,EALG;AAMXM,MAAAA,QAAQ,EAAE;AANC,KAAb;AAQD;;AAEDc,EAAAA,iBAAiB,GAAE;AACjB,SAAKC,SAAL;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,WACI,oBAAC,MAAD,CAAQ,OAAR,QACG,KAAKC,cAAL,EADH,EAEG,KAAKC,cAAL,EAFH,EAGG,KAAKC,aAAL,EAHH,CADJ;AAOD;;AAzBoC;;AAgHvC,eAAe/C,QAAf","sourcesContent":["import { EmptyState, Spinner, Layout, Page, Select, Button } from '@shopify/polaris';\nimport Cookies from 'js-cookie';\n\nclass Selector extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      shopName: '',\n      selecting: true,\n      loading: true,\n      selected: '',\n      themes: [],\n      redirect: false\n    };\n  }\n\n  componentDidMount(){\n    this.getThemes();\n  }\n\n  render() {\n    return (\n        <Layout.Section>\n          {this.renderSelector()}\n          {this.renderRedirect()}\n          {this.renderSpinner()}\n        </Layout.Section>\n    );\n  };\n\n  setOrigin = () => {\n    let urlParams = new URLSearchParams(window.location.search);\n    let shopOrigin = urlParams.get('shop');\n    this.setState({shopOrigin: shopOrigin})\n    console.log(shopOrigin)\n  }\n\n  getThemes = async () => {\n    let urlParams = new URLSearchParams(window.location.search);\n    let shopOrigin = urlParams.get('shop');\n    let shopName = urlParams.get('shop').split(\".\")[0]\n    fetch(\"/themes/\" + shopName, { method: \"GET\"})\n    .then(response => response.json())\n    .then(json => this.setState({themes: json.data.themes, shopName: shopName, loading: false}))\n  };\n\n  handleChange = (newValue) => {\n    this.setState({selected: newValue});\n  };\n\n  renderRedirect = () => {\n    if (this.state.redirect && !this.state.loading) {\n      return (\n        <Layout.Section>\n          <a\n            target=\"_blank\"\n            style={{textDecoration: 'none'}}\n            href={'http://' + this.state.shopName + `.myshopify.com/admin/themes/${this.state.selected}/editor`}>\n              <Button primary>OPEN CUSTOMIZER</Button>\n          </a>\n\n          <Button primary onClick={this.triggerReset}>ADD MARQUEE TO ANOTHER THEME</Button>\n        </Layout.Section>\n      )\n    }\n  }\n\n  renderSpinner = () => {\n    if(this.state.loading){\n      return (\n        <EmptyState>\n          <Spinner/>\n        </EmptyState>\n      )\n    }\n  }\n\n  triggerReset = () => {\n    this.setState({\n      selecting: true,\n      selected: '',\n      redirect: false\n    })\n  }\n\n  renderSelector = () => {\n    if (this.state.selecting && !this.state.loading){\n      return(\n        <EmptyState sty>\n          <Select\n            options = {this.state.themes ? this.state.themes.map(el => {return{label: `${el.name}`, value:`${el.id}`}}) : null}\n            onChange={this.handleChange}\n            value={this.state.selected}\n            placeholder = \"select a theme\"\n            />\n          <Button primary onClick={this.assetUpdateRequest}>Add</Button>\n        </EmptyState>\n      )\n    }\n  }\n\n  assetUpdateRequest = async () => {\n    this.state.selected ? this.setState({loading: true}) : null\n    var fetchUrl = `${this.state.shopName}/${this.state.selected}`;\n    var method = \"PUT\";\n    fetch(fetchUrl, { method: method })\n    .then(response => response.json())\n    .then(json => {\n      if (json.status === 'success'){\n        this.setState({redirect: true, selecting: false, loading: false})\n      }\n    })\n  }\n}\n\nexport default Selector;\n"]},"metadata":{},"sourceType":"module"}