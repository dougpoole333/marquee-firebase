{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\nimport { EmptyState, Spinner, Layout, Page, Card, Select, Button } from '@shopify/polaris';\nimport Installs from './installs.js';\nimport Cookies from 'js-cookie';\n\nclass Selector extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"getThemes\", async () => {\n      let urlParams = new URLSearchParams(window.location.search);\n      let shopOrigin = urlParams.get('shop');\n      let shopName = urlParams.get('shop').split(\".\")[0];\n      fetch(\"/themes/\" + shopName, {\n        method: \"GET\"\n      }).then(response => response.json()).then(json => this.setState({\n        themes: json.data.themes,\n        shopName: shopName,\n        loading: false\n      }));\n    });\n\n    _defineProperty(this, \"getInstalls\", async () => {\n      let urlParams = new URLSearchParams(window.location.search);\n      let shopOrigin = urlParams.get('shop');\n      let shopName = urlParams.get('shop').split(\".\")[0];\n      fetch(\"/\" + shopName + \"/installs\", {\n        method: \"GET\"\n      }).then(response => response.json()).then(json => {\n        this.setState({\n          installs: json.data\n        });\n      });\n    });\n\n    _defineProperty(this, \"handleChange\", newValue => {\n      this.setState({\n        selected: newValue\n      });\n    });\n\n    _defineProperty(this, \"renderSpinner\", () => {\n      if (this.state.loading) {\n        return React.createElement(EmptyState, null, React.createElement(Spinner, null));\n      }\n    });\n\n    _defineProperty(this, \"triggerReset\", () => {\n      this.setState({\n        selecting: true,\n        selected: '',\n        redirect: false\n      });\n    });\n\n    _defineProperty(this, \"renderSelector\", () => {\n      if (this.state.selecting) {\n        return React.createElement(EmptyState, null, React.createElement(Select, {\n          options: this.state.themes ? this.state.themes.map(el => {\n            return {\n              label: `${el.name}`,\n              value: `${el.id}`\n            };\n          }) : null,\n          onChange: this.handleChange,\n          value: this.state.selected,\n          placeholder: \"select a theme\"\n        }), React.createElement(Button, {\n          primary: true,\n          onClick: this.assetUpdateRequest\n        }, \"Add\"));\n      }\n    });\n\n    _defineProperty(this, \"renderInstalls\", () => {\n      if (this.state.selecting) {\n        return React.createElement(Card, null, React.createElement(Installs, {\n          shopName: this.state.shopName,\n          installs: this.state.installs\n        }));\n      }\n    });\n\n    _defineProperty(this, \"assetUpdateRequest\", async () => {\n      this.state.selected ? this.setState({\n        loading: true\n      }) : null;\n      var fetchUrl = `${this.state.shopName}/${this.state.selected}`;\n      var method = \"PUT\";\n      fetch(fetchUrl, {\n        method: method\n      }).then(response => response.json()).then(json => {\n        if (json.status === 'success') {\n          this.setState({\n            loading: false\n          });\n        }\n      }).then(() => {\n        this.getInstalls();\n      });\n    });\n\n    this.state = {\n      shopName: '',\n      selecting: true,\n      loading: true,\n      selected: '',\n      themes: [],\n      installs: []\n    };\n  }\n\n  componentDidMount() {\n    this.getThemes();\n    this.getInstalls();\n  }\n\n  render() {\n    return React.createElement(Card, null, this.renderSelector(), this.renderInstalls());\n  }\n\n}\n\nexport default Selector;","map":{"version":3,"sources":["/Users/userone/Documents/App-dev/marquee-firebase/pages/selector.js"],"names":["EmptyState","Spinner","Layout","Page","Card","Select","Button","Installs","Cookies","Selector","React","Component","constructor","props","urlParams","URLSearchParams","window","location","search","shopOrigin","get","shopName","split","fetch","method","then","response","json","setState","themes","data","loading","installs","newValue","selected","state","selecting","redirect","map","el","label","name","value","id","handleChange","assetUpdateRequest","fetchUrl","status","getInstalls","componentDidMount","getThemes","render","renderSelector","renderInstalls"],"mappings":"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","sourcesContent":["import { EmptyState, Spinner, Layout, Page, Card, Select, Button } from '@shopify/polaris';\nimport Installs from './installs.js'\nimport Cookies from 'js-cookie';\n\nclass Selector extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      shopName: '',\n      selecting: true,\n      loading: true,\n      selected: '',\n      themes: [],\n      installs: []\n    };\n  }\n\n  componentDidMount(){\n    this.getThemes();\n    this.getInstalls()\n  }\n\n  render() {\n    return (\n        <Card>\n          {this.renderSelector()}\n          {this.renderInstalls()}\n        </Card>\n    );\n  };\n\n  getThemes = async () => {\n    let urlParams = new URLSearchParams(window.location.search);\n    let shopOrigin = urlParams.get('shop');\n    let shopName = urlParams.get('shop').split(\".\")[0]\n    fetch(\"/themes/\" + shopName, { method: \"GET\"})\n    .then(response => response.json())\n    .then(json => this.setState({themes: json.data.themes, shopName: shopName, loading: false}))\n  };\n\n  getInstalls = async () => {\n      let urlParams = new URLSearchParams(window.location.search);\n      let shopOrigin = urlParams.get('shop');\n      let shopName = urlParams.get('shop').split(\".\")[0]\n      fetch(\"/\"+shopName+\"/installs\", { method: \"GET\"})\n      .then(response => response.json())\n      .then(json =>{\n          this.setState({installs: json.data})\n      })\n  }\n\n  handleChange = (newValue) => {\n    this.setState({selected: newValue});\n  };\n\n  renderSpinner = () => {\n    if(this.state.loading){\n      return (\n        <EmptyState>\n          <Spinner/>\n        </EmptyState>\n      )\n    }\n  }\n\n  triggerReset = () => {\n    this.setState({\n      selecting: true,\n      selected: '',\n      redirect: false\n    })\n  }\n\n  renderSelector = () => {\n    if (this.state.selecting){\n      return(\n        <EmptyState>\n          <Select\n            options = {this.state.themes ? this.state.themes.map(el => {return{label: `${el.name}`, value:`${el.id}`}}) : null}\n            onChange={this.handleChange}\n            value={this.state.selected}\n            placeholder = \"select a theme\"\n            />\n          <Button primary onClick={this.assetUpdateRequest}>Add</Button>\n        </EmptyState>\n      )\n    }\n  }\n\n  renderInstalls = () => {\n    if (this.state.selecting){\n      return(\n        <Card><Installs shopName={this.state.shopName} installs={this.state.installs}/></Card>\n      )\n    }\n  }\n\n  assetUpdateRequest = async () => {\n    this.state.selected ? this.setState({loading: true}) : null\n    var fetchUrl = `${this.state.shopName}/${this.state.selected}`;\n    var method = \"PUT\";\n    fetch(fetchUrl, { method: method })\n    .then(response => response.json())\n    .then(json => {\n      if (json.status === 'success'){\n        this.setState({loading: false})\n      }\n    })\n    .then( () => {\n      this.getInstalls()\n    })\n  }\n}\n\nexport default Selector;\n"]},"metadata":{},"sourceType":"module"}